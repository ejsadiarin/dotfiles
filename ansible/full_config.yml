---
# Main Playbook
# run on local: ansible-playbook full_config.yml --ask-become-pass
# run on remotes: ansible-playbook full_config.yml --ask-pass --ask-become-pass -i inventory/hosts.ini
# for dry-run (check mode): ansible-playbook --check full_config.yml --ask-become-pass
# NOTE: playbooks dir are just optional/separate things and are NOT RUN/INCLUDED when running this main playbook

- name: Exquisite Dotfiles Configuration
  hosts: "{{ target_hosts | default('localhost') }}" # if have multiple hosts on hosts.ini file then: 'all', 'linux', 'webservers', etc.
  connection: "{{ target_connection | default('local') }}"
  gather_facts: true

  pre_tasks:
    - name: Detect OS and put in machine_os variable
      ansible.builtin.set_fact:
        machine_os: "{{ ansible_facts['os_family'] | lower }}" # can be 'archlinux', 'debian', 'redhat', etc.

    - name: OS detection for Arch-based systems
      ansible.builtin.set_fact:
        machine_os: "archlinux"
      when: "ansible_facts['os_family'] | lower == 'archlinux' or ansible_facts['distribution'] | lower == 'arch' or ansible_facts['distribution'] | lower == 'manjaro'"

    - name: OS detection for Debian-based systems
      ansible.builtin.set_fact:
        machine_os: "debian"
      when: "ansible_facts['os_family'] | lower == 'debian' or ansible_facts['distribution'] | lower == 'ubuntu' or ansible_facts['distribution'] | lower == 'pop!_os'"

    - name: OS detection for Redhat-based systems
      ansible.builtin.set_fact:
        machine_os: "redhat"
      when: "ansible_facts['os_family'] | lower == 'redhat' or ansible_facts['distribution'] | lower == 'fedora' or ansible_facts['distribution'] | lower == 'centos' or ansible_facts['distribution'] | lower == 'rocky'"

    - name: Debug machine_os
      ansible.builtin.debug:
        msg: "The machine is running {{ machine_os }} ({{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }})"

    - name: Validate supported OS
      ansible.builtin.fail:
        msg: "Unsupported OS: {{ ansible_facts['distribution'] }}. This playbook supports: Arch, Debian, and RedHat-based systems."
      when: machine_os not in ['archlinux', 'debian', 'redhat']

    - name: Register Host User
      ansible.builtin.set_fact:
        host_user: "{{ ansible_user_id }}"
      when: host_user is not defined

    - name: Run system_update role
      ansible.builtin.include_role:
        name: system_update

    - name: Configure NTP timesync
      ansible.builtin.include_role:
        name: timezone_ntp

    - name: Configure Locale to UTF-8
      ansible.builtin.shell: "localectl set-locale LANG=en_US.UTF-8"

  roles:
    - network_manager
    - zsh
    - essentials
    - git
    - ssh
    - gpg
    - tmux
    - neovim
    - cron
    - kitty
    - gh
    - go_role
    - js_ts_role
    - docker
    - iosevka_term_nerd_font
    - lazygit
    - lazydocker
    - tailscale
    - syncthing
    # - git_lfs
    # - zoom
    # - discord
    # - spotify_flatpak
    # - obsidian_flatpak
    # - jetbrains_mono_nerd_font
    # - python_role
    # - java_role
    # - csharp_dotnet_role
    # - mpv

  tasks:
    - name: Link .ideavimrc
      ansible.builtin.file:
        src: "{{ ansible_user_dir }}/dotfiles/.ideavimrc"
        dest: "{{ ansible_user_dir }}/.ideavimrc"
        state: link

    - name: Run jetbrains_config role for keymaps
      ansible.builtin.include_role:
        name: jetbrains_config

    - name: Remove existing .vimrc if have any
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/.vimrc"
        state: absent

    - name: Link .vimrc
      ansible.builtin.file:
        src: "{{ ansible_user_dir }}/dotfiles/.vimrc"
        dest: "{{ ansible_user_dir }}/.vimrc"
        state: link

    - name: Post Installation | ssh-agent
      ansible.builtin.debug:
        msg: 'do eval "$(ssh-agent -s)" and ssh-add ~/.ssh/id_ed25519 here to activate ssh keys'

    - name: Post Installation | import gpg private key in .gnupg
      ansible.builtin.debug:
        msg: "To import your private GPG key, run: gpg --import {{ ansible_user_dir }}/.gnupg/private.gpg"

    - name: Post Installation | delete temp private/public gpg keys in .gnupg after importing
      ansible.builtin.debug:
        msg: "Run rm or shred: rm -rf private.gpg public.gpg"

    - name: Post Installation | cleanup master_password
      ansible.builtin.file:
        path: "{{ ansible_user_dir }}/dotfiles/ansible/master_password"
        state: absent

    - name: Post Installation | Tailscale
      ansible.builtin.debug:
        msg: "Run: `sudo tailscale up` --> to authenticate to tailscale"

    - name: Post Installation | Syncthing
      ansible.builtin.debug:
        msg: "Access localhost:8384 for the syncthing dashboard and add/share devices/folders as needed and/or desired"

    - name: Post Installation | zsh, tmux, nvim
      ansible.builtin.debug:
        msg: "see ansible/README.md for more details"

    - name: Post Installation | extras installation via ansible
      ansible.builtin.debug:
        msg: "packet-tracer (via packettracer-fedora script and editing /usr/share/applications/cisco-pt821.desktop), discord, spotify (flatpak), minecraft launcher, obsidian (flatpak), dbeaver (flatpak) etc."

    - name: Post Installation | Wireshark
      ansible.builtin.debug:
        msg: "Group changes will take effect on next user login. No session refresh needed for Ansible automation."
